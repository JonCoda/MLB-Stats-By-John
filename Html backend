<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MLB Information Hub</title>
    <!-- Tailwind CSS CDN for styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Custom styles for better aesthetics and mobile responsiveness */
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f2f5;
            color: #333;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            min-height: 100vh;
        }
        .container {
            background-color: #ffffff;
            border-radius: 1.5rem; /* Rounded corners */
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
            padding: 1.5rem;
            margin: 1rem;
            width: 100%;
            max-width: 800px;
            box-sizing: border-box;
        }
        .tab-button {
            padding: 0.75rem 1.25rem;
            border-radius: 0.75rem;
            font-weight: 600;
            transition: all 0.2s ease-in-out;
            cursor: pointer;
            text-align: center;
            white-space: nowrap; /* Prevent wrapping on small screens */
            flex-grow: 1; /* Allow buttons to grow */
        }
        .tab-button.active {
            background-color: #1a73e8; /* Google Blue */
            color: white;
            box-shadow: 0 4px 8px rgba(26, 115, 232, 0.3);
        }
        .tab-button:not(.active):hover {
            background-color: #e0e0e0;
        }
        .section-content {
            display: none;
            padding-top: 1rem;
        }
        .section-content.active {
            display: block;
        }
        .score-item {
            background-color: #f9f9f9;
            border-radius: 0.75rem;
            padding: 0.75rem;
            margin-bottom: 0.75rem;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
            display: flex;
            flex-direction: column;
            gap: 0.25rem;
        }
        .score-item strong {
            color: #1a73e8;
        }
        .score-item span {
            font-size: 0.9rem;
            color: #666;
        }
        .loading-spinner {
            border: 4px solid rgba(0, 0, 0, 0.1);
            border-top: 4px solid #1a73e8;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 20px auto;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        h2 {
            color: #1a73e8;
            font-weight: 700;
            margin-bottom: 1rem;
        }
        h3 {
            color: #333;
            font-weight: 600;
            margin-top: 1rem;
            margin-bottom: 0.5rem;
        }
        p, ul {
            line-height: 1.6;
            margin-bottom: 1rem;
        }
        ul {
            list-style-type: disc;
            padding-left: 1.5rem;
        }
        li {
            margin-bottom: 0.5rem;
        }

        /* Responsive adjustments */
        @media (max-width: 640px) {
            .tab-buttons-container {
                flex-direction: column;
            }
            .tab-button {
                margin-bottom: 0.5rem;
            }
            .container {
                margin: 0.5rem;
                padding: 1rem;
            }
        }
    </style>
</head>
<body class="bg-gray-100 flex items-center justify-center">
    <div class="container bg-white rounded-3xl shadow-xl p-6 md:p-8 lg:p-10">
        <h1 class="text-4xl font-extrabold text-center text-blue-700 mb-6">âš¾ MLB Info Hub</h1>

        <!-- Tab Navigation -->
        <div class="tab-buttons-container flex flex-wrap gap-2 mb-6 justify-center">
            <button class="tab-button active bg-blue-600 text-white" data-tab="live-scores">Live Scores</button>
            <button class="tab-button bg-gray-200 text-gray-700" data-tab="advanced-stats">Advanced Stats</button>
            <button class="tab-button bg-gray-200 text-gray-700" data-tab="general-info">General Info</button>
        </div>

        <!-- Live Scores Section -->
        <div id="live-scores" class="section-content active">
            <h2 class="text-2xl font-bold text-blue-700 mb-4">MLB Live Score Ticker</h2>
            <div id="scores-display" class="space-y-3">
                <div class="loading-spinner"></div>
                <p class="text-center text-gray-500 mt-4">Fetching live scores...</p>
            </div>
            <p class="text-sm text-gray-500 text-center mt-4">Scores refresh automatically every 30 seconds.</p>
        </div>

        <!-- Advanced Stats Section -->
        <div id="advanced-stats" class="section-content">
            <h2 class="text-2xl font-bold text-blue-700 mb-4">Understanding MLB Advanced Stats (Sabermetrics)</h2>
            <div id="advanced-stats-content">
                <div class="loading-spinner"></div>
                <p class="text-center text-gray-500 mt-4">Loading advanced stats information...</p>
            </div>
        </div>

        <!-- General MLB Info Section -->
        <div id="general-info" class="section-content">
            <h2 class="text-2xl font-bold text-blue-700 mb-4">General MLB Information</h2>
            <div id="general-info-content">
                <div class="loading-spinner"></div>
                <p class="text-center text-gray-500 mt-4">Loading general MLB information...</p>
            </div>
        </div>
    </div>

    <script>
        // Base URL for your Python Flask backend
        const API_BASE_URL = 'http://127.0.0.1:5000/api'; // This is the default address for Flask

        // JavaScript for tab switching and fetching data from Python backend
        document.addEventListener('DOMContentLoaded', () => {
            const tabButtons = document.querySelectorAll('.tab-button');
            const sections = document.querySelectorAll('.section-content');
            const scoresDisplay = document.getElementById('scores-display');
            const advancedStatsContent = document.getElementById('advanced-stats-content');
            const generalInfoContent = document.getElementById('general-info-content');

            // Function to show a specific tab and fetch its content
            const showTab = async (tabId) => {
                // Update active button styles
                tabButtons.forEach(button => {
                    if (button.dataset.tab === tabId) {
                        button.classList.add('active', 'bg-blue-600', 'text-white');
                        button.classList.remove('bg-gray-200', 'text-gray-700');
                    } else {
                        button.classList.remove('active', 'bg-blue-600', 'text-white');
                        button.classList.add('bg-gray-200', 'text-gray-700');
                    }
                });

                // Show/hide sections
                sections.forEach(section => {
                    if (section.id === tabId) {
                        section.classList.add('active');
                    } else {
                        section.classList.remove('active');
                    }
                });

                // Fetch content based on tab
                if (tabId === 'live-scores') {
                    getLiveScores(); // This function will be called initially and by interval
                } else if (tabId === 'advanced-stats') {
                    await getAdvancedStatsInfo();
                } else if (tabId === 'general-info') {
                    await getGeneralInfo();
                }
            };

            // Event listeners for tab buttons
            tabButtons.forEach(button => {
                button.addEventListener('click', () => {
                    showTab(button.dataset.tab);
                });
            });

            // --- Data Fetching Functions ---

            const getLiveScores = async () => {
                scoresDisplay.innerHTML = '<div class="loading-spinner"></div><p class="text-center text-gray-500 mt-4">Fetching live scores...</p>';
                try {
                    const response = await fetch(`${API_BASE_URL}/scores`);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    const scores = await response.json();

                    if (scores.length === 0) {
                        scoresDisplay.innerHTML = '<p class="text-center text-gray-600">No live games found at the moment.</p>';
                        return;
                    }

                    let scoresHtml = '';
                    scores.forEach(s => {
                        scoresHtml += `
                            <div class="score-item">
                                <strong>${s.matchup}</strong>
                                <span>Score: ${s.score}</span>
                                <span>Status: ${s.status}</span>
                            </div>
                        `;
                    });
                    scoresDisplay.innerHTML = scoresHtml;

                } catch (error) {
                    scoresDisplay.innerHTML = `<p class="text-center text-red-500">Error fetching scores: ${error.message}. Please ensure the Python server is running.</p>`;
                    console.error("Error fetching live scores:", error);
                }
            };

            const getAdvancedStatsInfo = async () => {
                advancedStatsContent.innerHTML = '<div class="loading-spinner"></div><p class="text-center text-gray-500 mt-4">Loading advanced stats information...</p>';
                try {
                    const response = await fetch(`${API_BASE_URL}/advanced_stats`);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    const data = await response.json();

                    let html = `<p class="text-gray-700">${data.description}</p>`;
                    html += `<ul class="list-disc list-inside text-gray-700">`;
                    data.stats.forEach(stat => {
                        html += `
                            <li>
                                <h3>${stat.name}</h3>
                                <p>${stat.explanation}</p>
                            </li>
                        `;
                    });
                    html += `</ul>`;
                    html += `<p class="text-gray-700">You can typically find these advanced statistics on dedicated baseball statistics websites like `;
                    data.resources.forEach((res, index) => {
                        html += `<a href="${res.url}" target="_blank" class="text-blue-600 hover:underline">${res.name}</a>`;
                        if (index < data.resources.length - 1) {
                            html += `, `;
                        }
                    });
                    html += `.</p>`;
                    advancedStatsContent.innerHTML = html;

                } catch (error) {
                    advancedStatsContent.innerHTML = `<p class="text-center text-red-500">Error loading advanced stats: ${error.message}. Please ensure the Python server is running.</p>`;
                    console.error("Error fetching advanced stats:", error);
                }
            };

            const getGeneralInfo = async () => {
                generalInfoContent.innerHTML = '<div class="loading-spinner"></div><p class="text-center text-gray-500 mt-4">Loading general MLB information...</p>';
                try {
                    const response = await fetch(`${API_BASE_URL}/general_info`);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    const data = await response.json();

                    let html = `<p class="text-gray-700">${data.title}</p>`;
                    html += `<ul class="list-disc list-inside text-gray-700">`;
                    data.sections.forEach(section => {
                        html += `
                            <li>
                                <h3>${section.name}</h3>
                                <p>${section.content}</p>
                            </li>
                        `;
                    });
                    html += `</ul>`;
                    generalInfoContent.innerHTML = html;

                } catch (error) {
                    generalInfoContent.innerHTML = `<p class="text-center text-red-500">Error loading general info: ${error.message}. Please ensure the Python server is running.</p>`;
                    console.error("Error fetching general info:", error);
                }
            };

            // Initial load for the active tab (Live Scores)
            getLiveScores();

            // Set up autorefresh for live scores every 30 seconds
            setInterval(getLiveScores, 30000);
        });
    </script>
</body>
</html>

